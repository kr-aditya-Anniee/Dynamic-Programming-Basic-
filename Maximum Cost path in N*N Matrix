Given a NxN matrix of positive integers. There are only three possible moves from a cell Matrix[r][c].

Matrix [r+1] [c]
Matrix [r+1] [c-1]
Matrix [r+1] [c+1]
â€‹Starting from any column in row 0, return the largest sum of any of the paths up to row N-1.


Example 1:

Input: N = 2
Matrix = {{348, 391},
          {618, 193}}
Output: 1009
Explaination: The best path is 391 -> 618. 
It gives the sum = 1009.

Example 2:

Input: N = 2
Matrix = {{2, 2},
          {2, 2}}
Output: 4
Explaination: No matter which path is 
chosen, the output is 4.

Your Task:
You do not need to read input or print anything. Your task is to complete the function maximumPath() which takes the size N and the Matrix as input parameters and returns the highest maximum path sum.


Expected Time Complexity: O(N*N)
Expected Auxiliary Space: O(N*N)


Constraints:
1 ≤ N ≤ 100
1 ≤ Matrix[i][j] ≤ 1000

class Solution{
public:
    int maximumPath(int N, vector<vector<int>> m)
    { int n=N;
    int dp[n][n];
    for(int i=0;i<n;i++)
    {for(int j=0;j<n;j++)
    { if(i==0)
    {dp[i][j]= m[i][j];}
    else if(j>=1 && j+1<n)
    dp[i][j]=max(dp[i-1][j-1],max(dp[i-1][j+1],dp[i-1][j])) + m[i][j];
    else if(j==0 )
        dp[i][j]=max(dp[i-1][j+1],dp[i-1][j]) + m[i][j];
    else if(j==n-1 )
        dp[i][j]=max(dp[i-1][j-1],dp[i-1][j]) + m[i][j];
    }}
    //to find MAximuum among n-1 th row
    int k=0;
    for(int i=0;i<n;i++)
    {if(k<dp[n-1][i])
    k=dp[n-1][i];}
    return k;}
    
};
